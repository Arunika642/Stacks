#include <bits/stdc++.h>
using namespace std;

int priority(char c)
{
    if(c == '^')
    {
        return 3;
    }
    else if(c == '*' || c== '/')
    {
        return 2;
    }
    else if(c == '+' || c == '-')
    {
        return 1;
    }
    else
    {
        return -1;
    }
}

string reverse(string s)
{
    int n = s.length();
    int j = n-1;
    for(int i=0; i<n/2;i++, j--)
    {
        swap(s[i],s[j]);
    }
    for(int i=0; i<s.length();i++)
    {
        if(s[i] =='(') s[i] = ')';
        else if(s[i] == ')') s[i]='(';
    }
    return s;
}
string convertInfixToPrefix(string s)
{
    stack<char> st;
    int i=0; 
    string ans = "";
    
    s = reverse(s);
    while(i<s.length())
    {
        if(s[i]>='A' && s[i]<='Z' || s[i]>='a' && s[i]<='z' || s[i] >='0' && s[i] <='9')
        {
            ans = ans + s[i];
        }
        else if(s[i]=='(')
        {
            st.push(s[i]);
        }
        else if(s[i] ==')')
        {
            while(!st.empty() && st.top()!='(')
            {
                ans+= st.top();
                st.pop();
            }
            st.pop();
        }
        else
        {
            if(s[i] =='^')
            {
                while(!st.empty() && priority(s[i]) <= priority(st.top()))
                {
                    ans+= st.top();
                    st.pop();
                }
            }
            else
            {
                while(!st.empty() && priority(s[i])< priority(st.top()))
                {
                    ans+= st.top();
                    st.pop();
                }
            }
            st.push(s[i]);
        }
        i++;
    }
    while(!st.empty())
    {
        ans+= st.top();
        st.pop();
    }
    ans = reverse(ans);
    return ans;
}
int main() {
	// your code goes here
	string s = "(A+B)*C-D+F";
	string ans = convertInfixToPrefix(s);
	cout << ans;

}
